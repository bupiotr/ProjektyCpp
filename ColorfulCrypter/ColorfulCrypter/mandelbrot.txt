private void button1_Click(object sender, EventArgs e)
        {
            int width = 400, height = 400, x = 0, zaduzo = 0;
            int[] tablica = new int[400];
            string doCryptu = richTextBox1.Text;
            Bitmap mapa = new Bitmap(width, height);

            string letterR = richTextBox1.Text;
            string letterG = richTextBox2.Text;
            string letterB = richTextBox3.Text;
            int[] array1 = { letterR.Length, letterG.Length, letterB.Length };
            int min = array1.Min();

            if (min > width)
            {
                zaduzo = min - width;
                MessageBox.Show($"Error twoj tekst jest za duzy o {zaduzo} znakow");
            }
            else
            {
                for (int y = 0; y < height; y++)
                {
                    //foreach (char letter in doCryptu)
                    for(int i=0;i<min;i++)
                    {
                        int convertedR = Convert.ToInt32(letterR[i]);
                        int convertedG = Convert.ToInt32(letterG[i]);
                        int convertedB = Convert.ToInt32(letterB[i]);
                        mapa.SetPixel(x, y, Color.FromArgb(255, convertedR, convertedG, convertedB));
                        x++;
                    }
                    x = 0;
                }
            }

            pictureBox1.Image = mapa;

        }

        private void richTextBox1_TextChanged(object sender, EventArgs e)
        {

        }


        private void button2_Click(object sender, EventArgs e)
        {
            pictureBox1.Image.Save("kappa.png");
        }

        //***********************Mandelbrot************************

        private void button3_Click(object sender, EventArgs e)
        {
            pictureBox1.Image = DrawMandelbrot(600,400,-2.5,1,-1,1);
        }

        public static List<Color> GenerateColorPalette()
        {
            List<Color> retVal = new List<Color>();
            for (int i = 0; i <= 255; i++)
            {
                retVal.Add(Color.FromArgb(255, i, i, 205));
            }
            return retVal;
        }

        public static Bitmap DrawMandelbrot(int width, int height, double rMin, double rMax, double iMin, double iMax)
        {
            List<Color> Palette = GenerateColorPalette();
            Bitmap img = new Bitmap(width, height); // Bitmap to contain the set

            double rScale = (Math.Abs(rMin) + Math.Abs(rMax)) / width; // Amount to move each pixel in the real numbers
            double iScale = (Math.Abs(iMin) + Math.Abs(iMax)) / height; // Amount to move each pixel in the imaginary numbers

            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    Complex c = new Complex(x * rScale + rMin, y * iScale + iMin); // Scaled complex number
                    Complex z = c;
                    for (int i = 0; i < Palette.Count; i++) // 255 iterations with the method we already wrote
                    {
                        if (z.Magnitude >= 2.0)
                        {
                            img.SetPixel(x, y, Palette[i]); // Set the pixel if the magnitude is greater than two
                            break; // We're done with this loop
                        }
                        else
                        {
                            z = c + Complex.Pow(z, 2); // Z = Zlast^2 + C
                        }
                    }
                }
            }

            return img;
        }
